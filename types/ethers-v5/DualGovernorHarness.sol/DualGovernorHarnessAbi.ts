/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DualGovernorHarnessAbiInterface extends utils.Interface {
  functions: {
    "BALLOTS_TYPEHASH()": FunctionFragment;
    "BALLOTS_WITH_REASON_TYPEHASH()": FunctionFragment;
    "BALLOT_TYPEHASH()": FunctionFragment;
    "BALLOT_WITH_REASON_TYPEHASH()": FunctionFragment;
    "CLOCK_MODE()": FunctionFragment;
    "COUNTING_MODE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "ONE()": FunctionFragment;
    "addToList(bytes32,address)": FunctionFragment;
    "cashToken()": FunctionFragment;
    "castVote(uint256,uint8)": FunctionFragment;
    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "castVoteWithReason(uint256,uint8,string)": FunctionFragment;
    "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)": FunctionFragment;
    "castVotes(uint256[],uint8[])": FunctionFragment;
    "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)": FunctionFragment;
    "castVotesWithReason(uint256[],uint8[],string[])": FunctionFragment;
    "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)": FunctionFragment;
    "clock()": FunctionFragment;
    "emergencyAddToList(bytes32,address)": FunctionFragment;
    "emergencyRemoveFromList(bytes32,address)": FunctionFragment;
    "emergencyUpdateConfig(bytes32,bytes32)": FunctionFragment;
    "execute(address[],uint256[],bytes[],bytes32)": FunctionFragment;
    "getVotes(address,uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "hashProposal(address[],uint256[],bytes[],bytes32)": FunctionFragment;
    "markEpochActive()": FunctionFragment;
    "maxProposalFee()": FunctionFragment;
    "minProposalFee()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numberOfProposals(uint256)": FunctionFragment;
    "numberOfProposalsVotedOn(uint256,address)": FunctionFragment;
    "powerToken()": FunctionFragment;
    "powerTokenQuorumRatio()": FunctionFragment;
    "proposalDeadline(uint256)": FunctionFragment;
    "proposalFee()": FunctionFragment;
    "proposalProposer(uint256)": FunctionFragment;
    "proposalSnapshot(uint256)": FunctionFragment;
    "propose(address[],uint256[],bytes[],string)": FunctionFragment;
    "quorum(uint256)": FunctionFragment;
    "registrar()": FunctionFragment;
    "removeFromList(bytes32,address)": FunctionFragment;
    "reset()": FunctionFragment;
    "reward()": FunctionFragment;
    "setNumberOfProposals(uint256,uint256)": FunctionFragment;
    "setPowerTokenQuorumRatio(uint16)": FunctionFragment;
    "setProposal(uint256,address,uint256,uint256,bool,uint8)": FunctionFragment;
    "setProposalFee(uint256)": FunctionFragment;
    "setProposalFeeRange(uint256,uint256,uint256)": FunctionFragment;
    "setZeroTokenQuorumRatio(uint16)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "updateConfig(bytes32,bytes32)": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "zeroToken()": FunctionFragment;
    "zeroTokenQuorumRatio()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BALLOTS_TYPEHASH"
      | "BALLOTS_TYPEHASH()"
      | "BALLOTS_WITH_REASON_TYPEHASH"
      | "BALLOTS_WITH_REASON_TYPEHASH()"
      | "BALLOT_TYPEHASH"
      | "BALLOT_TYPEHASH()"
      | "BALLOT_WITH_REASON_TYPEHASH"
      | "BALLOT_WITH_REASON_TYPEHASH()"
      | "CLOCK_MODE"
      | "CLOCK_MODE()"
      | "COUNTING_MODE"
      | "COUNTING_MODE()"
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "ONE"
      | "ONE()"
      | "addToList"
      | "addToList(bytes32,address)"
      | "cashToken"
      | "cashToken()"
      | "castVote"
      | "castVote(uint256,uint8)"
      | "castVoteBySig"
      | "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
      | "castVoteWithReason"
      | "castVoteWithReason(uint256,uint8,string)"
      | "castVoteWithReasonBySig"
      | "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"
      | "castVotes"
      | "castVotes(uint256[],uint8[])"
      | "castVotesBySig"
      | "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"
      | "castVotesWithReason"
      | "castVotesWithReason(uint256[],uint8[],string[])"
      | "castVotesWithReasonBySig"
      | "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"
      | "clock"
      | "clock()"
      | "emergencyAddToList"
      | "emergencyAddToList(bytes32,address)"
      | "emergencyRemoveFromList"
      | "emergencyRemoveFromList(bytes32,address)"
      | "emergencyUpdateConfig"
      | "emergencyUpdateConfig(bytes32,bytes32)"
      | "execute"
      | "execute(address[],uint256[],bytes[],bytes32)"
      | "getVotes"
      | "getVotes(address,uint256)"
      | "hasVoted"
      | "hasVoted(uint256,address)"
      | "hashProposal"
      | "hashProposal(address[],uint256[],bytes[],bytes32)"
      | "markEpochActive"
      | "markEpochActive()"
      | "maxProposalFee"
      | "maxProposalFee()"
      | "minProposalFee"
      | "minProposalFee()"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "numberOfProposals"
      | "numberOfProposals(uint256)"
      | "numberOfProposalsVotedOn"
      | "numberOfProposalsVotedOn(uint256,address)"
      | "powerToken"
      | "powerToken()"
      | "powerTokenQuorumRatio"
      | "powerTokenQuorumRatio()"
      | "proposalDeadline"
      | "proposalDeadline(uint256)"
      | "proposalFee"
      | "proposalFee()"
      | "proposalProposer"
      | "proposalProposer(uint256)"
      | "proposalSnapshot"
      | "proposalSnapshot(uint256)"
      | "propose"
      | "propose(address[],uint256[],bytes[],string)"
      | "quorum"
      | "quorum(uint256)"
      | "registrar"
      | "registrar()"
      | "removeFromList"
      | "removeFromList(bytes32,address)"
      | "reset"
      | "reset()"
      | "reward"
      | "reward()"
      | "setNumberOfProposals"
      | "setNumberOfProposals(uint256,uint256)"
      | "setPowerTokenQuorumRatio"
      | "setPowerTokenQuorumRatio(uint16)"
      | "setProposal"
      | "setProposal(uint256,address,uint256,uint256,bool,uint8)"
      | "setProposalFee"
      | "setProposalFee(uint256)"
      | "setProposalFeeRange"
      | "setProposalFeeRange(uint256,uint256,uint256)"
      | "setZeroTokenQuorumRatio"
      | "setZeroTokenQuorumRatio(uint16)"
      | "state"
      | "state(uint256)"
      | "updateConfig"
      | "updateConfig(bytes32,bytes32)"
      | "votingDelay"
      | "votingDelay()"
      | "votingPeriod"
      | "votingPeriod()"
      | "zeroToken"
      | "zeroToken()"
      | "zeroTokenQuorumRatio"
      | "zeroTokenQuorumRatio()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BALLOTS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToList",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToList(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonBySig",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotes",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotes(uint256[],uint8[])",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesBySig",
    values: [BigNumberish[], BigNumberish[], BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)",
    values: [BigNumberish[], BigNumberish[], BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesWithReason",
    values: [BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesWithReason(uint256[],uint8[],string[])",
    values: [BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesWithReasonBySig",
    values: [
      BigNumberish[],
      BigNumberish[],
      string[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)",
    values: [
      BigNumberish[],
      BigNumberish[],
      string[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "clock()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyAddToList",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAddToList(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRemoveFromList",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRemoveFromList(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUpdateConfig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUpdateConfig(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(address[],uint256[],bytes[],bytes32)",
    values: [string[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [string[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal(address[],uint256[],bytes[],bytes32)",
    values: [string[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposals(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposalsVotedOn",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposalsVotedOn(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "powerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalProposer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalProposer(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    values: [string[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrar()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromList",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromList(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "reset()", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNumberOfProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumberOfProposals(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPowerTokenQuorumRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPowerTokenQuorumRatio(uint16)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposal",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposal(uint256,address,uint256,uint256,bool,uint8)",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalFee(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalFeeRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalFeeRange(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setZeroTokenQuorumRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setZeroTokenQuorumRatio(uint16)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "state(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOTS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLOCK_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVotes(uint256[],uint8[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesWithReason(uint256[],uint8[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesWithReasonBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddToList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddToList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRemoveFromList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRemoveFromList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUpdateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUpdateConfig(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(address[],uint256[],bytes[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVoted(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal(address[],uint256[],bytes[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposals(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposalsVotedOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposalsVotedOn(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "powerToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalProposer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorum(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrar()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNumberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumberOfProposals(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPowerTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPowerTokenQuorumRatio(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposal(uint256,address,uint256,uint256,bool,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalFeeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalFeeRange(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZeroTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZeroTokenQuorumRatio(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "state(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio()",
    data: BytesLike
  ): Result;

  events: {
    "PowerTokenQuorumRatioSet(uint16)": EventFragment;
    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalFeeRangeSet(uint256,uint256)": EventFragment;
    "ProposalFeeSet(uint256)": EventFragment;
    "QuorumNumeratorUpdated(uint256,uint256)": EventFragment;
    "VoteCast(address,uint256,uint8,uint256,string)": EventFragment;
    "ZeroTokenQuorumRatioSet(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PowerTokenQuorumRatioSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PowerTokenQuorumRatioSet(uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFeeRangeSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalFeeRangeSet(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFeeSet(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumNumeratorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuorumNumeratorUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VoteCast(address,uint256,uint8,uint256,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZeroTokenQuorumRatioSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ZeroTokenQuorumRatioSet(uint16)"
  ): EventFragment;
}

export interface PowerTokenQuorumRatioSetEventObject {
  powerTokenQuorumRatio: number;
}
export type PowerTokenQuorumRatioSetEvent = TypedEvent<
  [number],
  PowerTokenQuorumRatioSetEventObject
>;

export type PowerTokenQuorumRatioSetEventFilter =
  TypedEventFilter<PowerTokenQuorumRatioSetEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  proposer: string;
  targets: string[];
  values: BigNumber[];
  signatures: string[];
  calldatas: string[];
  voteStart: BigNumber;
  voteEnd: BigNumber;
  description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    string
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalFeeRangeSetEventObject {
  minProposalFee: BigNumber;
  maxProposalFee: BigNumber;
}
export type ProposalFeeRangeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalFeeRangeSetEventObject
>;

export type ProposalFeeRangeSetEventFilter =
  TypedEventFilter<ProposalFeeRangeSetEvent>;

export interface ProposalFeeSetEventObject {
  proposalFee: BigNumber;
}
export type ProposalFeeSetEvent = TypedEvent<
  [BigNumber],
  ProposalFeeSetEventObject
>;

export type ProposalFeeSetEventFilter = TypedEventFilter<ProposalFeeSetEvent>;

export interface QuorumNumeratorUpdatedEventObject {
  oldQuorumNumerator: BigNumber;
  newQuorumNumerator: BigNumber;
}
export type QuorumNumeratorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuorumNumeratorUpdatedEventObject
>;

export type QuorumNumeratorUpdatedEventFilter =
  TypedEventFilter<QuorumNumeratorUpdatedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  support: number;
  weight: BigNumber;
  reason: string;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, string],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface ZeroTokenQuorumRatioSetEventObject {
  zeroTokenQuorumRatio: number;
}
export type ZeroTokenQuorumRatioSetEvent = TypedEvent<
  [number],
  ZeroTokenQuorumRatioSetEventObject
>;

export type ZeroTokenQuorumRatioSetEventFilter =
  TypedEventFilter<ZeroTokenQuorumRatioSetEvent>;

export interface DualGovernorHarnessAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DualGovernorHarnessAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BALLOTS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "BALLOTS_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    BALLOTS_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "BALLOTS_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    BALLOT_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "BALLOT_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CLOCK_MODE(
      overrides?: CallOverrides
    ): Promise<[string] & { clockMode_: string }>;

    "CLOCK_MODE()"(
      overrides?: CallOverrides
    ): Promise<[string] & { clockMode_: string }>;

    COUNTING_MODE(
      overrides?: CallOverrides
    ): Promise<[string] & { countingMode_: string }>;

    "COUNTING_MODE()"(
      overrides?: CallOverrides
    ): Promise<[string] & { countingMode_: string }>;

    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator_: string }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator_: string }>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "addToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cashToken(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken_: string }>;

    "cashToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken_: string }>;

    castVote(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVote(uint256,uint8)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVoteWithReason(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVoteWithReasonBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVotes(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVotes(uint256[],uint8[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVotesBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVotesWithReason(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVotesWithReason(uint256[],uint8[],string[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVotesWithReasonBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clock(overrides?: CallOverrides): Promise<[number] & { clock_: number }>;

    "clock()"(
      overrides?: CallOverrides
    ): Promise<[number] & { clock_: number }>;

    emergencyAddToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "emergencyAddToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyRemoveFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "emergencyRemoveFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyUpdateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "emergencyUpdateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execute(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVotes(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight_: BigNumber }>;

    "getVotes(address,uint256)"(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight_: BigNumber }>;

    hasVoted(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasVoted_: boolean }>;

    "hasVoted(uint256,address)"(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasVoted_: boolean }>;

    hashProposal(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalId_: BigNumber }>;

    "hashProposal(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalId_: BigNumber }>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxProposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxProposalFee_: BigNumber }>;

    "maxProposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxProposalFee_: BigNumber }>;

    minProposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minProposalFee_: BigNumber }>;

    "minProposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minProposalFee_: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string] & { name_: string }>;

    "name()"(overrides?: CallOverrides): Promise<[string] & { name_: string }>;

    nonces(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce_: BigNumber }>;

    "nonces(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce_: BigNumber }>;

    numberOfProposals(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProposals_: BigNumber }>;

    "numberOfProposals(uint256)"(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProposals_: BigNumber }>;

    numberOfProposalsVotedOn(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProposalsVotedOn_: BigNumber }>;

    "numberOfProposalsVotedOn(uint256,address)"(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProposalsVotedOn_: BigNumber }>;

    powerToken(
      overrides?: CallOverrides
    ): Promise<[string] & { powerToken_: string }>;

    "powerToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { powerToken_: string }>;

    powerTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { powerTokenQuorumRatio_: BigNumber }>;

    "powerTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { powerTokenQuorumRatio_: BigNumber }>;

    proposalDeadline(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deadline_: BigNumber }>;

    "proposalDeadline(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deadline_: BigNumber }>;

    proposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalFee_: BigNumber }>;

    "proposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalFee_: BigNumber }>;

    proposalProposer(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { proposer_: string }>;

    "proposalProposer(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { proposer_: string }>;

    proposalSnapshot(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { snapshot_: BigNumber }>;

    "proposalSnapshot(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { snapshot_: BigNumber }>;

    propose(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],bytes[],string)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    quorum(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quorum_: BigNumber }>;

    "quorum(uint256)"(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quorum_: BigNumber }>;

    registrar(
      overrides?: CallOverrides
    ): Promise<[string] & { registrar_: string }>;

    "registrar()"(
      overrides?: CallOverrides
    ): Promise<[string] & { registrar_: string }>;

    removeFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "removeFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reset(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "reset()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reward(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    "reward()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    setNumberOfProposals(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setNumberOfProposals(uint256,uint256)"(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPowerTokenQuorumRatio(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setPowerTokenQuorumRatio(uint16)"(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposal(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setProposal(uint256,address,uint256,uint256,bool,uint8)"(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposalFee(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setProposalFee(uint256)"(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposalFeeRange(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setProposalFeeRange(uint256,uint256,uint256)"(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setZeroTokenQuorumRatio(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setZeroTokenQuorumRatio(uint16)"(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    state(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { state_: number }>;

    "state(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { state_: number }>;

    updateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "updateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    votingDelay(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingDelay_: BigNumber }>;

    "votingDelay()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingDelay_: BigNumber }>;

    votingPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingPeriod_: BigNumber }>;

    "votingPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingPeriod_: BigNumber }>;

    zeroToken(
      overrides?: CallOverrides
    ): Promise<[string] & { zeroToken_: string }>;

    "zeroToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { zeroToken_: string }>;

    zeroTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { zeroTokenQuorumRatio_: BigNumber }>;

    "zeroTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { zeroTokenQuorumRatio_: BigNumber }>;
  };

  BALLOTS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOTS_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  BALLOTS_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOTS_WITH_REASON_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  BALLOT_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_WITH_REASON_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

  "CLOCK_MODE()"(overrides?: CallOverrides): Promise<string>;

  COUNTING_MODE(overrides?: CallOverrides): Promise<string>;

  "COUNTING_MODE()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  addToList(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "addToList(bytes32,address)"(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cashToken(overrides?: CallOverrides): Promise<string>;

  "cashToken()"(overrides?: CallOverrides): Promise<string>;

  castVote(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVote(uint256,uint8)"(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVoteWithReason(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    reason_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVoteWithReason(uint256,uint8,string)"(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    reason_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVoteWithReasonBySig(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    reason_: string,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"(
    proposalId_: BigNumberish,
    support_: BigNumberish,
    reason_: string,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVotes(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVotes(uint256[],uint8[])"(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVotesBySig(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVotesWithReason(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    reasons_: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVotesWithReason(uint256[],uint8[],string[])"(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    reasons_: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVotesWithReasonBySig(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    reasons_: string[],
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"(
    proposalIds_: BigNumberish[],
    supports_: BigNumberish[],
    reasons_: string[],
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clock(overrides?: CallOverrides): Promise<number>;

  "clock()"(overrides?: CallOverrides): Promise<number>;

  emergencyAddToList(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "emergencyAddToList(bytes32,address)"(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyRemoveFromList(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "emergencyRemoveFromList(bytes32,address)"(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyUpdateConfig(
    key_: BytesLike,
    value_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "emergencyUpdateConfig(bytes32,bytes32)"(
    key_: BytesLike,
    value_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execute(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    descriptionHash_: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "execute(address[],uint256[],bytes[],bytes32)"(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    descriptionHash_: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVotes(
    account_: string,
    timepoint_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVotes(address,uint256)"(
    account_: string,
    timepoint_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasVoted(
    proposalId_: BigNumberish,
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasVoted(uint256,address)"(
    proposalId_: BigNumberish,
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashProposal(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    descriptionHash_: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "hashProposal(address[],uint256[],bytes[],bytes32)"(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    descriptionHash_: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  markEpochActive(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "markEpochActive()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfProposals(
    epoch_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfProposals(uint256)"(
    epoch_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfProposalsVotedOn(
    epoch_: BigNumberish,
    voter_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfProposalsVotedOn(uint256,address)"(
    epoch_: BigNumberish,
    voter_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  powerToken(overrides?: CallOverrides): Promise<string>;

  "powerToken()"(overrides?: CallOverrides): Promise<string>;

  powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalDeadline(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proposalDeadline(uint256)"(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalProposer(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "proposalProposer(uint256)"(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  proposalSnapshot(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proposalSnapshot(uint256)"(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  propose(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    description_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],bytes[],string)"(
    targets_: string[],
    values_: BigNumberish[],
    calldatas_: BytesLike[],
    description_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  quorum(
    timepoint_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quorum(uint256)"(
    timepoint_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registrar(overrides?: CallOverrides): Promise<string>;

  "registrar()"(overrides?: CallOverrides): Promise<string>;

  removeFromList(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "removeFromList(bytes32,address)"(
    list_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reset(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "reset()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reward(overrides?: CallOverrides): Promise<BigNumber>;

  "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

  setNumberOfProposals(
    epoch_: BigNumberish,
    numberOfProposals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setNumberOfProposals(uint256,uint256)"(
    epoch_: BigNumberish,
    numberOfProposals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPowerTokenQuorumRatio(
    newPowerTokenQuorumRatio_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setPowerTokenQuorumRatio(uint16)"(
    newPowerTokenQuorumRatio_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposal(
    proposalId_: BigNumberish,
    proposer_: string,
    voteStart_: BigNumberish,
    voteEnd_: BigNumberish,
    executed_: boolean,
    proposalType_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setProposal(uint256,address,uint256,uint256,bool,uint8)"(
    proposalId_: BigNumberish,
    proposer_: string,
    voteStart_: BigNumberish,
    voteEnd_: BigNumberish,
    executed_: boolean,
    proposalType_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposalFee(
    newProposalFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setProposalFee(uint256)"(
    newProposalFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposalFeeRange(
    newMinProposalFee_: BigNumberish,
    newMaxProposalFee_: BigNumberish,
    newProposalFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setProposalFeeRange(uint256,uint256,uint256)"(
    newMinProposalFee_: BigNumberish,
    newMaxProposalFee_: BigNumberish,
    newProposalFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setZeroTokenQuorumRatio(
    newZeroTokenQuorumRatio_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setZeroTokenQuorumRatio(uint16)"(
    newZeroTokenQuorumRatio_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  state(proposalId_: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  updateConfig(
    key_: BytesLike,
    value_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "updateConfig(bytes32,bytes32)"(
    key_: BytesLike,
    value_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  zeroToken(overrides?: CallOverrides): Promise<string>;

  "zeroToken()"(overrides?: CallOverrides): Promise<string>;

  zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BALLOTS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOTS_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    BALLOTS_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOTS_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    BALLOT_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_WITH_REASON_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<string>;

    COUNTING_MODE(overrides?: CallOverrides): Promise<string>;

    "COUNTING_MODE()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToList(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cashToken(overrides?: CallOverrides): Promise<string>;

    "cashToken()"(overrides?: CallOverrides): Promise<string>;

    castVote(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVote(uint256,uint8)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVoteWithReason(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVoteWithReasonBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVotes(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVotes(uint256[],uint8[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVotesBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVotesWithReason(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVotesWithReason(uint256[],uint8[],string[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVotesWithReasonBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<number>;

    "clock()"(overrides?: CallOverrides): Promise<number>;

    emergencyAddToList(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyAddToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRemoveFromList(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyRemoveFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyUpdateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyUpdateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotes(address,uint256)"(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasVoted(uint256,address)"(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashProposal(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashProposal(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markEpochActive(overrides?: CallOverrides): Promise<void>;

    "markEpochActive()"(overrides?: CallOverrides): Promise<void>;

    maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfProposals(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfProposals(uint256)"(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfProposalsVotedOn(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfProposalsVotedOn(uint256,address)"(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    powerToken(overrides?: CallOverrides): Promise<string>;

    "powerToken()"(overrides?: CallOverrides): Promise<string>;

    powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeadline(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalDeadline(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalProposer(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "proposalProposer(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    proposalSnapshot(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalSnapshot(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],bytes[],string)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorum(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quorum(uint256)"(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<string>;

    "registrar()"(overrides?: CallOverrides): Promise<string>;

    removeFromList(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    "reset()"(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNumberOfProposals(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNumberOfProposals(uint256,uint256)"(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPowerTokenQuorumRatio(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPowerTokenQuorumRatio(uint16)"(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposal(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProposal(uint256,address,uint256,uint256,bool,uint8)"(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalFee(
      newProposalFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProposalFee(uint256)"(
      newProposalFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalFeeRange(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProposalFeeRange(uint256,uint256,uint256)"(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setZeroTokenQuorumRatio(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setZeroTokenQuorumRatio(uint16)"(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "state(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    updateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroToken(overrides?: CallOverrides): Promise<string>;

    "zeroToken()"(overrides?: CallOverrides): Promise<string>;

    zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PowerTokenQuorumRatioSet(uint16)"(
      powerTokenQuorumRatio?: null
    ): PowerTokenQuorumRatioSetEventFilter;
    PowerTokenQuorumRatioSet(
      powerTokenQuorumRatio?: null
    ): PowerTokenQuorumRatioSetEventFilter;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"(
      proposalId?: null,
      proposer?: null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      voteStart?: null,
      voteEnd?: null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: null,
      proposer?: null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      voteStart?: null,
      voteEnd?: null,
      description?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(proposalId?: null): ProposalExecutedEventFilter;
    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;

    "ProposalFeeRangeSet(uint256,uint256)"(
      minProposalFee?: null,
      maxProposalFee?: null
    ): ProposalFeeRangeSetEventFilter;
    ProposalFeeRangeSet(
      minProposalFee?: null,
      maxProposalFee?: null
    ): ProposalFeeRangeSetEventFilter;

    "ProposalFeeSet(uint256)"(proposalFee?: null): ProposalFeeSetEventFilter;
    ProposalFeeSet(proposalFee?: null): ProposalFeeSetEventFilter;

    "QuorumNumeratorUpdated(uint256,uint256)"(
      oldQuorumNumerator?: null,
      newQuorumNumerator?: null
    ): QuorumNumeratorUpdatedEventFilter;
    QuorumNumeratorUpdated(
      oldQuorumNumerator?: null,
      newQuorumNumerator?: null
    ): QuorumNumeratorUpdatedEventFilter;

    "VoteCast(address,uint256,uint8,uint256,string)"(
      voter?: string | null,
      proposalId?: null,
      support?: null,
      weight?: null,
      reason?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: string | null,
      proposalId?: null,
      support?: null,
      weight?: null,
      reason?: null
    ): VoteCastEventFilter;

    "ZeroTokenQuorumRatioSet(uint16)"(
      zeroTokenQuorumRatio?: null
    ): ZeroTokenQuorumRatioSetEventFilter;
    ZeroTokenQuorumRatioSet(
      zeroTokenQuorumRatio?: null
    ): ZeroTokenQuorumRatioSetEventFilter;
  };

  estimateGas: {
    BALLOTS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOTS_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    BALLOTS_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOTS_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    BALLOT_WITH_REASON_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CLOCK_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    COUNTING_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    "COUNTING_MODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "addToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cashToken(overrides?: CallOverrides): Promise<BigNumber>;

    "cashToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVote(uint256,uint8)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVoteWithReason(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVoteWithReasonBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVotes(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVotes(uint256[],uint8[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVotesBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVotesWithReason(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVotesWithReason(uint256[],uint8[],string[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVotesWithReasonBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    "clock()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyAddToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "emergencyAddToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyRemoveFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "emergencyRemoveFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyUpdateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "emergencyUpdateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execute(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getVotes(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotes(address,uint256)"(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasVoted(uint256,address)"(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashProposal(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfProposals(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfProposals(uint256)"(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfProposalsVotedOn(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfProposalsVotedOn(uint256,address)"(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    powerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "powerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeadline(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalDeadline(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalProposer(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalProposer(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalSnapshot(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalSnapshot(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "propose(address[],uint256[],bytes[],string)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    quorum(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quorum(uint256)"(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    "registrar()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "removeFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reset(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "reset()"(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNumberOfProposals(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setNumberOfProposals(uint256,uint256)"(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPowerTokenQuorumRatio(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setPowerTokenQuorumRatio(uint16)"(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposal(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setProposal(uint256,address,uint256,uint256,bool,uint8)"(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposalFee(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setProposalFee(uint256)"(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposalFeeRange(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setProposalFeeRange(uint256,uint256,uint256)"(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setZeroTokenQuorumRatio(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setZeroTokenQuorumRatio(uint16)"(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    state(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "updateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroToken(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOTS_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOTS_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BALLOTS_WITH_REASON_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BALLOTS_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BALLOT_WITH_REASON_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BALLOT_WITH_REASON_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLOCK_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COUNTING_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "COUNTING_MODE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "addToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cashToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cashToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    castVote(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,uint8)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVoteWithReason(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVoteWithReasonBySig(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"(
      proposalId_: BigNumberish,
      support_: BigNumberish,
      reason_: string,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVotes(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVotes(uint256[],uint8[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVotesBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVotesBySig(uint256[],uint8[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVotesWithReason(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVotesWithReason(uint256[],uint8[],string[])"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVotesWithReasonBySig(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "castVotesWithReasonBySig(uint256[],uint8[],string[],uint8,bytes32,bytes32)"(
      proposalIds_: BigNumberish[],
      supports_: BigNumberish[],
      reasons_: string[],
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyAddToList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "emergencyAddToList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyRemoveFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "emergencyRemoveFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyUpdateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "emergencyUpdateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execute(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVotes(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotes(address,uint256)"(
      account_: string,
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVoted(uint256,address)"(
      proposalId_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashProposal(address[],uint256[],bytes[],bytes32)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      descriptionHash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxProposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxProposalFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minProposalFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfProposals(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfProposals(uint256)"(
      epoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfProposalsVotedOn(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfProposalsVotedOn(uint256,address)"(
      epoch_: BigNumberish,
      voter_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    powerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "powerToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "powerTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalDeadline(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalDeadline(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalProposer(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalProposer(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalSnapshot(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalSnapshot(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "propose(address[],uint256[],bytes[],string)"(
      targets_: string[],
      values_: BigNumberish[],
      calldatas_: BytesLike[],
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quorum(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quorum(uint256)"(
      timepoint_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registrar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromList(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "removeFromList(bytes32,address)"(
      list_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reset(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "reset()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNumberOfProposals(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setNumberOfProposals(uint256,uint256)"(
      epoch_: BigNumberish,
      numberOfProposals_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPowerTokenQuorumRatio(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setPowerTokenQuorumRatio(uint16)"(
      newPowerTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposal(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setProposal(uint256,address,uint256,uint256,bool,uint8)"(
      proposalId_: BigNumberish,
      proposer_: string,
      voteStart_: BigNumberish,
      voteEnd_: BigNumberish,
      executed_: boolean,
      proposalType_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposalFee(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setProposalFee(uint256)"(
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposalFeeRange(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setProposalFeeRange(uint256,uint256,uint256)"(
      newMinProposalFee_: BigNumberish,
      newMaxProposalFee_: BigNumberish,
      newProposalFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setZeroTokenQuorumRatio(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setZeroTokenQuorumRatio(uint16)"(
      newZeroTokenQuorumRatio_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    state(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "updateConfig(bytes32,bytes32)"(
      key_: BytesLike,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "zeroTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
