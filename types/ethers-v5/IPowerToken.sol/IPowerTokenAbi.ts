/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IPowerTokenAbiInterface extends utils.Interface {
  functions: {
    "CLOCK_MODE()": FunctionFragment;
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "INITIAL_SUPPLY()": FunctionFragment;
    "ONE()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "activeEpochs()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "amountToAuction()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "bootstrapEpoch()": FunctionFragment;
    "bootstrapToken()": FunctionFragment;
    "buy(uint256,address)": FunctionFragment;
    "cashToken()": FunctionFragment;
    "clock()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "delegatesAt(address,uint256)": FunctionFragment;
    "getCost(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "hasParticipatedAt(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isActiveEpoch(uint256)": FunctionFragment;
    "markEpochActive()": FunctionFragment;
    "markParticipation(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "participationInflation()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLOCK_MODE"
      | "CLOCK_MODE()"
      | "DELEGATION_TYPEHASH"
      | "DELEGATION_TYPEHASH()"
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "INITIAL_SUPPLY"
      | "INITIAL_SUPPLY()"
      | "ONE"
      | "ONE()"
      | "PERMIT_TYPEHASH"
      | "PERMIT_TYPEHASH()"
      | "activeEpochs"
      | "activeEpochs()"
      | "allowance"
      | "allowance(address,address)"
      | "amountToAuction"
      | "amountToAuction()"
      | "approve"
      | "approve(address,uint256)"
      | "balanceOf"
      | "balanceOf(address)"
      | "balanceOfAt"
      | "balanceOfAt(address,uint256)"
      | "bootstrapEpoch"
      | "bootstrapEpoch()"
      | "bootstrapToken"
      | "bootstrapToken()"
      | "buy"
      | "buy(uint256,address)"
      | "cashToken"
      | "cashToken()"
      | "clock"
      | "clock()"
      | "decimals"
      | "decimals()"
      | "decreaseAllowance"
      | "decreaseAllowance(address,uint256)"
      | "delegate"
      | "delegate(address)"
      | "delegateBySig"
      | "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
      | "delegates"
      | "delegates(address)"
      | "delegatesAt"
      | "delegatesAt(address,uint256)"
      | "getCost"
      | "getCost(uint256)"
      | "getPastVotes"
      | "getPastVotes(address,uint256)"
      | "getVotes"
      | "getVotes(address)"
      | "governor"
      | "governor()"
      | "hasParticipatedAt"
      | "hasParticipatedAt(address,uint256)"
      | "increaseAllowance"
      | "increaseAllowance(address,uint256)"
      | "isActiveEpoch"
      | "isActiveEpoch(uint256)"
      | "markEpochActive"
      | "markEpochActive()"
      | "markParticipation"
      | "markParticipation(address)"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "participationInflation"
      | "participationInflation()"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "symbol"
      | "symbol()"
      | "totalSupply"
      | "totalSupply()"
      | "totalSupplyAt"
      | "totalSupplyAt(uint256)"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "treasury"
      | "treasury()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeEpochs()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountToAuction()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpoch()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "clock()", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegate(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegates(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesAt(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCost(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVotes(address)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governor()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasParticipatedAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasParticipatedAt(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveEpoch(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation(address)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "participationInflation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participationInflation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasury()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLOCK_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeEpochs()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToAuction()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpoch()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buy(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegate(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegates(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCost(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotes(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasParticipatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasParticipatedAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveEpoch(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationInflation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury()", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Buy(address,uint256,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "EpochMarkedActive(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Buy(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateChanged(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateVotesChanged(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochMarkedActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochMarkedActive(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  account: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BuyEventObject {
  buyer: string;
  amount: BigNumber;
  cost: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<
  [string, string, string],
  DelegateChangedEventObject
>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedEventObject
>;

export type DelegateVotesChangedEventFilter =
  TypedEventFilter<DelegateVotesChangedEvent>;

export interface EpochMarkedActiveEventObject {
  epoch: BigNumber;
}
export type EpochMarkedActiveEvent = TypedEvent<
  [BigNumber],
  EpochMarkedActiveEventObject
>;

export type EpochMarkedActiveEventFilter =
  TypedEventFilter<EpochMarkedActiveEvent>;

export interface TransferEventObject {
  account: string;
  recipient: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IPowerTokenAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPowerTokenAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLOCK_MODE(
      overrides?: CallOverrides
    ): Promise<[string] & { clockMode: string }>;

    "CLOCK_MODE()"(
      overrides?: CallOverrides
    ): Promise<[string] & { clockMode: string }>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string] & { typehash: string }>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string] & { typehash: string }>;

    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator: string }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator: string }>;

    INITIAL_SUPPLY(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { initialSupply: BigNumber }>;

    "INITIAL_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { initialSupply: BigNumber }>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber] & { one: BigNumber }>;

    "ONE()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { one: BigNumber }>;

    PERMIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string] & { typehash: string }>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string] & { typehash: string }>;

    activeEpochs(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeEpochs: BigNumber }>;

    "activeEpochs()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeEpochs: BigNumber }>;

    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { allowance: BigNumber }>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { allowance: BigNumber }>;

    amountToAuction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToAuction: BigNumber }>;

    "amountToAuction()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToAuction: BigNumber }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    balanceOfAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOfAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    bootstrapEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bootstrapEpoch: BigNumber }>;

    "bootstrapEpoch()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bootstrapEpoch: BigNumber }>;

    bootstrapToken(
      overrides?: CallOverrides
    ): Promise<[string] & { bootstrapToken: string }>;

    "bootstrapToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { bootstrapToken: string }>;

    buy(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "buy(uint256,address)"(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cashToken(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken: string }>;

    "cashToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken: string }>;

    clock(overrides?: CallOverrides): Promise<[number] & { clock: number }>;

    "clock()"(overrides?: CallOverrides): Promise<[number] & { clock: number }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;

    decreaseAllowance(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { delegatee: string }>;

    "delegates(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { delegatee: string }>;

    delegatesAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { delegatee: string }>;

    "delegatesAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { delegatee: string }>;

    getCost(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "getCost(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votePower: BigNumber }>;

    "getPastVotes(address,uint256)"(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votePower: BigNumber }>;

    getVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votePower: BigNumber }>;

    "getVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votePower: BigNumber }>;

    governor(
      overrides?: CallOverrides
    ): Promise<[string] & { governor: string }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<[string] & { governor: string }>;

    hasParticipatedAt(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { participated: boolean }>;

    "hasParticipatedAt(address,uint256)"(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { participated: boolean }>;

    increaseAllowance(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isActiveEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isActiveEpoch: boolean }>;

    "isActiveEpoch(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isActiveEpoch: boolean }>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    markParticipation(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "markParticipation(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string] & { name: string }>;

    "name()"(overrides?: CallOverrides): Promise<[string] & { name: string }>;

    nonces(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    "nonces(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    participationInflation(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { participationInflation: BigNumber }>;

    "participationInflation()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { participationInflation: BigNumber }>;

    permit(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string] & { symbol: string }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<[string] & { symbol: string }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    totalSupplyAt(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    "totalSupplyAt(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    treasury(
      overrides?: CallOverrides
    ): Promise<[string] & { treasury: string }>;

    "treasury()"(
      overrides?: CallOverrides
    ): Promise<[string] & { treasury: string }>;
  };

  CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

  "CLOCK_MODE()"(overrides?: CallOverrides): Promise<string>;

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  activeEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  "activeEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    account: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    account: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amountToAuction(overrides?: CallOverrides): Promise<BigNumber>;

  "amountToAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    account: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    account: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bootstrapEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "bootstrapEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrapToken(overrides?: CallOverrides): Promise<string>;

  "bootstrapToken()"(overrides?: CallOverrides): Promise<string>;

  buy(
    amount: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "buy(uint256,address)"(
    amount: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cashToken(overrides?: CallOverrides): Promise<string>;

  "cashToken()"(overrides?: CallOverrides): Promise<string>;

  clock(overrides?: CallOverrides): Promise<number>;

  "clock()"(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: CallOverrides): Promise<string>;

  "delegates(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  delegatesAt(
    account: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "delegatesAt(address,uint256)"(
    account: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCost(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getCost(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotes(
    account: string,
    timepoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPastVotes(address,uint256)"(
    account: string,
    timepoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getVotes(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  hasParticipatedAt(
    delegatee: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasParticipatedAt(address,uint256)"(
    delegatee: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isActiveEpoch(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isActiveEpoch(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  markEpochActive(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "markEpochActive()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  markParticipation(
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "markParticipation(address)"(
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  participationInflation(overrides?: CallOverrides): Promise<BigNumber>;

  "participationInflation()"(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    account: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    account: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    account: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    account: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<string>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    activeEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "activeEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountToAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "amountToAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrapEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "bootstrapEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapToken(overrides?: CallOverrides): Promise<string>;

    "bootstrapToken()"(overrides?: CallOverrides): Promise<string>;

    buy(
      amount: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(uint256,address)"(
      amount: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cashToken(overrides?: CallOverrides): Promise<string>;

    "cashToken()"(overrides?: CallOverrides): Promise<string>;

    clock(overrides?: CallOverrides): Promise<number>;

    "clock()"(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(account: string, overrides?: CallOverrides): Promise<string>;

    "delegates(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    delegatesAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "delegatesAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCost(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCost(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPastVotes(address,uint256)"(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    hasParticipatedAt(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasParticipatedAt(address,uint256)"(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isActiveEpoch(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    markEpochActive(overrides?: CallOverrides): Promise<void>;

    "markEpochActive()"(overrides?: CallOverrides): Promise<void>;

    markParticipation(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "markParticipation(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participationInflation(overrides?: CallOverrides): Promise<BigNumber>;

    "participationInflation()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      account?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      account?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "Buy(address,uint256,uint256)"(
      buyer?: string | null,
      amount?: null,
      cost?: null
    ): BuyEventFilter;
    Buy(buyer?: string | null, amount?: null, cost?: null): BuyEventFilter;

    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;

    "EpochMarkedActive(uint256)"(
      epoch?: BigNumberish | null
    ): EpochMarkedActiveEventFilter;
    EpochMarkedActive(
      epoch?: BigNumberish | null
    ): EpochMarkedActiveEventFilter;

    "Transfer(address,address,uint256)"(
      account?: string | null,
      recipient?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      account?: string | null,
      recipient?: string | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    activeEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "activeEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountToAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "amountToAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrapEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "bootstrapEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapToken(overrides?: CallOverrides): Promise<BigNumber>;

    "bootstrapToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "buy(uint256,address)"(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cashToken(overrides?: CallOverrides): Promise<BigNumber>;

    "cashToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    "clock()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "delegates(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatesAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatesAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCost(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCost(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPastVotes(address,uint256)"(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasParticipatedAt(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasParticipatedAt(address,uint256)"(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isActiveEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActiveEpoch(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    markParticipation(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "markParticipation(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participationInflation(overrides?: CallOverrides): Promise<BigNumber>;

    "participationInflation()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CLOCK_MODE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INITIAL_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeEpochs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountToAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amountToAuction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrapEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bootstrapEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bootstrapToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "buy(uint256,address)"(
      amount: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cashToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cashToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegates(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatesAt(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegatesAt(address,uint256)"(
      account: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCost(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCost(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPastVotes(address,uint256)"(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasParticipatedAt(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasParticipatedAt(address,uint256)"(
      delegatee: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isActiveEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActiveEpoch(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markEpochActive(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "markEpochActive()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    markParticipation(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "markParticipation(address)"(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participationInflation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participationInflation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
