/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockZeroToken,
  MockZeroTokenInterface,
} from "../../Mocks.sol/MockZeroToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5060b18061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c806340c10f1914602a575b5f80fd5b60396035366004603b565b5050565b005b5f8060408385031215604b575f80fd5b823573ffffffffffffffffffffffffffffffffffffffff81168114606d575f80fd5b94602093909301359350505056fea264697066735822122007a5cb72ac2c43e03ef3e59e2347d1ce7c5d5025707f837920f4a6f578fe5d8264736f6c63430008140033";

type MockZeroTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZeroTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZeroToken__factory extends ContractFactory {
  constructor(...args: MockZeroTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockZeroToken> {
    return super.deploy(overrides || {}) as Promise<MockZeroToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockZeroToken {
    return super.attach(address) as MockZeroToken;
  }
  override connect(signer: Signer): MockZeroToken__factory {
    return super.connect(signer) as MockZeroToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZeroTokenInterface {
    return new utils.Interface(_abi) as MockZeroTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZeroToken {
    return new Contract(address, _abi, signerOrProvider) as MockZeroToken;
  }
}
