/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IDualGovernorAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BALLOTS_TYPEHASH"
      | "BALLOTS_TYPEHASH()"
      | "BALLOTS_WITH_REASON_TYPEHASH"
      | "BALLOTS_WITH_REASON_TYPEHASH()"
      | "BALLOT_TYPEHASH"
      | "BALLOT_TYPEHASH()"
      | "BALLOT_WITH_REASON_TYPEHASH"
      | "BALLOT_WITH_REASON_TYPEHASH()"
      | "CLOCK_MODE"
      | "CLOCK_MODE()"
      | "COUNTING_MODE"
      | "COUNTING_MODE()"
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "ONE"
      | "ONE()"
      | "cashToken"
      | "cashToken()"
      | "castVote"
      | "castVote(uint256,uint8)"
      | "castVoteBySig"
      | "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
      | "castVoteWithReason"
      | "castVoteWithReason(uint256,uint8,string)"
      | "castVoteWithReasonBySig"
      | "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"
      | "clock"
      | "clock()"
      | "execute"
      | "execute(address[],uint256[],bytes[],bytes32)"
      | "getVotes"
      | "getVotes(address,uint256)"
      | "hasVoted"
      | "hasVoted(uint256,address)"
      | "hashProposal"
      | "hashProposal(address[],uint256[],bytes[],bytes32)"
      | "maxProposalFee"
      | "maxProposalFee()"
      | "minProposalFee"
      | "minProposalFee()"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "numberOfProposals"
      | "numberOfProposals(uint256)"
      | "numberOfProposalsVotedOn"
      | "numberOfProposalsVotedOn(uint256,address)"
      | "powerToken"
      | "powerToken()"
      | "powerTokenQuorumRatio"
      | "powerTokenQuorumRatio()"
      | "proposalDeadline"
      | "proposalDeadline(uint256)"
      | "proposalFee"
      | "proposalFee()"
      | "proposalProposer"
      | "proposalProposer(uint256)"
      | "proposalSnapshot"
      | "proposalSnapshot(uint256)"
      | "propose"
      | "propose(address[],uint256[],bytes[],string)"
      | "quorum"
      | "quorum(uint256)"
      | "registrar"
      | "registrar()"
      | "reward"
      | "reward()"
      | "state"
      | "state(uint256)"
      | "votingDelay"
      | "votingDelay()"
      | "votingPeriod"
      | "votingPeriod()"
      | "zeroToken"
      | "zeroToken()"
      | "zeroTokenQuorumRatio"
      | "zeroTokenQuorumRatio()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PowerTokenQuorumRatioSet"
      | "PowerTokenQuorumRatioSet(uint16)"
      | "ProposalCreated"
      | "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
      | "ProposalExecuted"
      | "ProposalExecuted(uint256)"
      | "ProposalFeeRangeSet"
      | "ProposalFeeRangeSet(uint256,uint256)"
      | "ProposalFeeSet"
      | "ProposalFeeSet(uint256)"
      | "QuorumNumeratorUpdated"
      | "QuorumNumeratorUpdated(uint256,uint256)"
      | "VoteCast"
      | "VoteCast(address,uint256,uint8,uint256,string)"
      | "ZeroTokenQuorumRatioSet"
      | "ZeroTokenQuorumRatioSet(uint16)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BALLOTS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COUNTING_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE()", values?: undefined): string;
  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonBySig",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "clock()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(address[],uint256[],bytes[],bytes32)",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal(address[],uint256[],bytes[],bytes32)",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposals(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposalsVotedOn",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposalsVotedOn(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "powerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalProposer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalProposer(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    values: [AddressLike[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrar()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward()", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "state(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOTS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOTS_WITH_REASON_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_WITH_REASON_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLOCK_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COUNTING_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(address[],uint256[],bytes[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVoted(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal(address[],uint256[],bytes[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposals(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposalsVotedOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposalsVotedOn(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "powerToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalProposer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propose(address[],uint256[],bytes[],string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorum(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrar()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "state(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio()",
    data: BytesLike
  ): Result;
}

export namespace PowerTokenQuorumRatioSetEvent {
  export type InputTuple = [powerTokenQuorumRatio: BigNumberish];
  export type OutputTuple = [powerTokenQuorumRatio: bigint];
  export interface OutputObject {
    powerTokenQuorumRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    voteStart: BigNumberish,
    voteEnd: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    voteStart: bigint,
    voteEnd: bigint,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    voteStart: bigint;
    voteEnd: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalFeeRangeSetEvent {
  export type InputTuple = [
    minProposalFee: BigNumberish,
    maxProposalFee: BigNumberish
  ];
  export type OutputTuple = [minProposalFee: bigint, maxProposalFee: bigint];
  export interface OutputObject {
    minProposalFee: bigint;
    maxProposalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalFeeSetEvent {
  export type InputTuple = [proposalFee: BigNumberish];
  export type OutputTuple = [proposalFee: bigint];
  export interface OutputObject {
    proposalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumNumeratorUpdatedEvent {
  export type InputTuple = [
    oldQuorumNumerator: BigNumberish,
    newQuorumNumerator: BigNumberish
  ];
  export type OutputTuple = [
    oldQuorumNumerator: bigint,
    newQuorumNumerator: bigint
  ];
  export interface OutputObject {
    oldQuorumNumerator: bigint;
    newQuorumNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZeroTokenQuorumRatioSetEvent {
  export type InputTuple = [zeroTokenQuorumRatio: BigNumberish];
  export type OutputTuple = [zeroTokenQuorumRatio: bigint];
  export interface OutputObject {
    zeroTokenQuorumRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDualGovernorAbi extends BaseContract {
  connect(runner?: ContractRunner | null): IDualGovernorAbi;
  waitForDeployment(): Promise<this>;

  interface: IDualGovernorAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BALLOTS_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "BALLOTS_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  BALLOTS_WITH_REASON_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "BALLOTS_WITH_REASON_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  BALLOT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "BALLOT_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  BALLOT_WITH_REASON_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "BALLOT_WITH_REASON_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  "CLOCK_MODE()": TypedContractMethod<[], [string], "view">;

  COUNTING_MODE: TypedContractMethod<[], [string], "view">;

  "COUNTING_MODE()": TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  "DOMAIN_SEPARATOR()": TypedContractMethod<[], [string], "view">;

  ONE: TypedContractMethod<[], [bigint], "view">;

  "ONE()": TypedContractMethod<[], [bigint], "view">;

  cashToken: TypedContractMethod<[], [string], "view">;

  "cashToken()": TypedContractMethod<[], [string], "view">;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "castVote(uint256,uint8)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  castVoteBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReason: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReason(uint256,uint8,string)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReasonBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)": TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  "clock()": TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;

  "execute(address[],uint256[],bytes[],bytes32)": TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getVotes: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  "getVotes(address,uint256)": TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  "hasVoted(uint256,address)": TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  hashProposal: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;

  "hashProposal(address[],uint256[],bytes[],bytes32)": TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;

  maxProposalFee: TypedContractMethod<[], [bigint], "view">;

  "maxProposalFee()": TypedContractMethod<[], [bigint], "view">;

  minProposalFee: TypedContractMethod<[], [bigint], "view">;

  "minProposalFee()": TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  "name()": TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  "nonces(address)": TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  numberOfProposals: TypedContractMethod<
    [epoch: BigNumberish],
    [bigint],
    "view"
  >;

  "numberOfProposals(uint256)": TypedContractMethod<
    [epoch: BigNumberish],
    [bigint],
    "view"
  >;

  numberOfProposalsVotedOn: TypedContractMethod<
    [epoch: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  "numberOfProposalsVotedOn(uint256,address)": TypedContractMethod<
    [epoch: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  powerToken: TypedContractMethod<[], [string], "view">;

  "powerToken()": TypedContractMethod<[], [string], "view">;

  powerTokenQuorumRatio: TypedContractMethod<[], [bigint], "view">;

  "powerTokenQuorumRatio()": TypedContractMethod<[], [bigint], "view">;

  proposalDeadline: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  "proposalDeadline(uint256)": TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalFee: TypedContractMethod<[], [bigint], "view">;

  "proposalFee()": TypedContractMethod<[], [bigint], "view">;

  proposalProposer: TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "view"
  >;

  "proposalProposer(uint256)": TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "view"
  >;

  proposalSnapshot: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  "proposalSnapshot(uint256)": TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  propose: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  "propose(address[],uint256[],bytes[],string)": TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  quorum: TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;

  "quorum(uint256)": TypedContractMethod<
    [timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  registrar: TypedContractMethod<[], [string], "view">;

  "registrar()": TypedContractMethod<[], [string], "view">;

  reward: TypedContractMethod<[], [bigint], "view">;

  "reward()": TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  "state(uint256)": TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  votingDelay: TypedContractMethod<[], [bigint], "view">;

  "votingDelay()": TypedContractMethod<[], [bigint], "view">;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  "votingPeriod()": TypedContractMethod<[], [bigint], "view">;

  zeroToken: TypedContractMethod<[], [string], "view">;

  "zeroToken()": TypedContractMethod<[], [string], "view">;

  zeroTokenQuorumRatio: TypedContractMethod<[], [bigint], "view">;

  "zeroTokenQuorumRatio()": TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BALLOTS_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOTS_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOTS_WITH_REASON_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOTS_WITH_REASON_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_WITH_REASON_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BALLOT_WITH_REASON_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLOCK_MODE()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COUNTING_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COUNTING_MODE()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cashToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason(uint256,uint8,string)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonBySig(uint256,uint8,string,uint8,bytes32,bytes32)"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "clock()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "execute(address[],uint256[],bytes[],bytes32)"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted(uint256,address)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashProposal"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashProposal(address[],uint256[],bytes[],bytes32)"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      descriptionHash: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxProposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfProposals"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfProposals(uint256)"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfProposalsVotedOn"
  ): TypedContractMethod<
    [epoch: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "numberOfProposalsVotedOn(uint256,address)"
  ): TypedContractMethod<
    [epoch: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "powerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "powerToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "powerTokenQuorumRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "powerTokenQuorumRatio()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalDeadline"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalDeadline(uint256)"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalProposer"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposalProposer(uint256)"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposalSnapshot"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalSnapshot(uint256)"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "propose(address[],uint256[],bytes[],string)"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorum"
  ): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorum(uint256)"
  ): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "registrar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registrar()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reward()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "state(uint256)"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingDelay()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zeroToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroTokenQuorumRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zeroTokenQuorumRatio()"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PowerTokenQuorumRatioSet"
  ): TypedContractEvent<
    PowerTokenQuorumRatioSetEvent.InputTuple,
    PowerTokenQuorumRatioSetEvent.OutputTuple,
    PowerTokenQuorumRatioSetEvent.OutputObject
  >;
  getEvent(
    key: "PowerTokenQuorumRatioSet(uint16)"
  ): TypedContractEvent<
    PowerTokenQuorumRatioSet_uint16_Event.InputTuple,
    PowerTokenQuorumRatioSet_uint16_Event.OutputTuple,
    PowerTokenQuorumRatioSet_uint16_Event.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
  ): TypedContractEvent<
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.InputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputTuple,
    ProposalCreated_uint256_address_address_array_uint256_array_string_array_bytes_array_uint256_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted(uint256)"
  ): TypedContractEvent<
    ProposalExecuted_uint256_Event.InputTuple,
    ProposalExecuted_uint256_Event.OutputTuple,
    ProposalExecuted_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ProposalFeeRangeSet"
  ): TypedContractEvent<
    ProposalFeeRangeSetEvent.InputTuple,
    ProposalFeeRangeSetEvent.OutputTuple,
    ProposalFeeRangeSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalFeeRangeSet(uint256,uint256)"
  ): TypedContractEvent<
    ProposalFeeRangeSet_uint256_uint256_Event.InputTuple,
    ProposalFeeRangeSet_uint256_uint256_Event.OutputTuple,
    ProposalFeeRangeSet_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ProposalFeeSet"
  ): TypedContractEvent<
    ProposalFeeSetEvent.InputTuple,
    ProposalFeeSetEvent.OutputTuple,
    ProposalFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "ProposalFeeSet(uint256)"
  ): TypedContractEvent<
    ProposalFeeSet_uint256_Event.InputTuple,
    ProposalFeeSet_uint256_Event.OutputTuple,
    ProposalFeeSet_uint256_Event.OutputObject
  >;
  getEvent(
    key: "QuorumNumeratorUpdated"
  ): TypedContractEvent<
    QuorumNumeratorUpdatedEvent.InputTuple,
    QuorumNumeratorUpdatedEvent.OutputTuple,
    QuorumNumeratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumNumeratorUpdated(uint256,uint256)"
  ): TypedContractEvent<
    QuorumNumeratorUpdated_uint256_uint256_Event.InputTuple,
    QuorumNumeratorUpdated_uint256_uint256_Event.OutputTuple,
    QuorumNumeratorUpdated_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast(address,uint256,uint8,uint256,string)"
  ): TypedContractEvent<
    VoteCast_address_uint256_uint8_uint256_string_Event.InputTuple,
    VoteCast_address_uint256_uint8_uint256_string_Event.OutputTuple,
    VoteCast_address_uint256_uint8_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "ZeroTokenQuorumRatioSet"
  ): TypedContractEvent<
    ZeroTokenQuorumRatioSetEvent.InputTuple,
    ZeroTokenQuorumRatioSetEvent.OutputTuple,
    ZeroTokenQuorumRatioSetEvent.OutputObject
  >;
  getEvent(
    key: "ZeroTokenQuorumRatioSet(uint16)"
  ): TypedContractEvent<
    ZeroTokenQuorumRatioSet_uint16_Event.InputTuple,
    ZeroTokenQuorumRatioSet_uint16_Event.OutputTuple,
    ZeroTokenQuorumRatioSet_uint16_Event.OutputObject
  >;

  filters: {
    "PowerTokenQuorumRatioSet(uint16)": TypedContractEvent<
      PowerTokenQuorumRatioSetEvent.InputTuple,
      PowerTokenQuorumRatioSetEvent.OutputTuple,
      PowerTokenQuorumRatioSetEvent.OutputObject
    >;
    PowerTokenQuorumRatioSet: TypedContractEvent<
      PowerTokenQuorumRatioSetEvent.InputTuple,
      PowerTokenQuorumRatioSetEvent.OutputTuple,
      PowerTokenQuorumRatioSetEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalFeeRangeSet(uint256,uint256)": TypedContractEvent<
      ProposalFeeRangeSetEvent.InputTuple,
      ProposalFeeRangeSetEvent.OutputTuple,
      ProposalFeeRangeSetEvent.OutputObject
    >;
    ProposalFeeRangeSet: TypedContractEvent<
      ProposalFeeRangeSetEvent.InputTuple,
      ProposalFeeRangeSetEvent.OutputTuple,
      ProposalFeeRangeSetEvent.OutputObject
    >;

    "ProposalFeeSet(uint256)": TypedContractEvent<
      ProposalFeeSetEvent.InputTuple,
      ProposalFeeSetEvent.OutputTuple,
      ProposalFeeSetEvent.OutputObject
    >;
    ProposalFeeSet: TypedContractEvent<
      ProposalFeeSetEvent.InputTuple,
      ProposalFeeSetEvent.OutputTuple,
      ProposalFeeSetEvent.OutputObject
    >;

    "QuorumNumeratorUpdated(uint256,uint256)": TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;
    QuorumNumeratorUpdated: TypedContractEvent<
      QuorumNumeratorUpdatedEvent.InputTuple,
      QuorumNumeratorUpdatedEvent.OutputTuple,
      QuorumNumeratorUpdatedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "ZeroTokenQuorumRatioSet(uint16)": TypedContractEvent<
      ZeroTokenQuorumRatioSetEvent.InputTuple,
      ZeroTokenQuorumRatioSetEvent.OutputTuple,
      ZeroTokenQuorumRatioSetEvent.OutputObject
    >;
    ZeroTokenQuorumRatioSet: TypedContractEvent<
      ZeroTokenQuorumRatioSetEvent.InputTuple,
      ZeroTokenQuorumRatioSetEvent.OutputTuple,
      ZeroTokenQuorumRatioSetEvent.OutputObject
    >;
  };
}
