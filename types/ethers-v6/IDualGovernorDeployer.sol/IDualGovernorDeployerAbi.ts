/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IDualGovernorDeployerAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deploy"
      | "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"
      | "getNextDeploy"
      | "getNextDeploy()"
      | "registrar"
      | "registrar()"
      | "zeroToken"
      | "zeroToken()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeploy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeploy()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrar()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeploy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrar()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
}

export interface IDualGovernorDeployerAbi extends BaseContract {
  connect(runner?: ContractRunner | null): IDualGovernorDeployerAbi;
  waitForDeployment(): Promise<this>;

  interface: IDualGovernorDeployerAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy: TypedContractMethod<
    [
      cashToken: AddressLike,
      powerToken: AddressLike,
      proposalFee: BigNumberish,
      minProposalFee: BigNumberish,
      maxProposalFee: BigNumberish,
      reward: BigNumberish,
      zeroTokenQuorumRatio: BigNumberish,
      powerTokenQuorumRatio: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)": TypedContractMethod<
    [
      cashToken: AddressLike,
      powerToken: AddressLike,
      proposalFee: BigNumberish,
      minProposalFee: BigNumberish,
      maxProposalFee: BigNumberish,
      reward: BigNumberish,
      zeroTokenQuorumRatio: BigNumberish,
      powerTokenQuorumRatio: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getNextDeploy: TypedContractMethod<[], [string], "view">;

  "getNextDeploy()": TypedContractMethod<[], [string], "view">;

  registrar: TypedContractMethod<[], [string], "view">;

  "registrar()": TypedContractMethod<[], [string], "view">;

  zeroToken: TypedContractMethod<[], [string], "view">;

  "zeroToken()": TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [
      cashToken: AddressLike,
      powerToken: AddressLike,
      proposalFee: BigNumberish,
      minProposalFee: BigNumberish,
      maxProposalFee: BigNumberish,
      reward: BigNumberish,
      zeroTokenQuorumRatio: BigNumberish,
      powerTokenQuorumRatio: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"
  ): TypedContractMethod<
    [
      cashToken: AddressLike,
      powerToken: AddressLike,
      proposalFee: BigNumberish,
      minProposalFee: BigNumberish,
      maxProposalFee: BigNumberish,
      reward: BigNumberish,
      zeroTokenQuorumRatio: BigNumberish,
      powerTokenQuorumRatio: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNextDeploy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextDeploy()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registrar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registrar()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroToken()"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
