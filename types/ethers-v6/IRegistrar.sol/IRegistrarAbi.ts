/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IRegistrarAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToList"
      | "addToList(bytes32,address)"
      | "get(bytes32)"
      | "get(bytes32[])"
      | "governor"
      | "governor()"
      | "governorDeployer"
      | "governorDeployer()"
      | "listContains(bytes32,address[])"
      | "listContains(bytes32,address)"
      | "powerTokenDeployer"
      | "powerTokenDeployer()"
      | "removeFromList"
      | "removeFromList(bytes32,address)"
      | "reset"
      | "reset()"
      | "updateConfig"
      | "updateConfig(bytes32,bytes32)"
      | "zeroToken"
      | "zeroToken()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressAddedToList"
      | "AddressAddedToList(bytes32,address)"
      | "AddressRemovedFromList"
      | "AddressRemovedFromList(bytes32,address)"
      | "ConfigUpdated"
      | "ConfigUpdated(bytes32,bytes32)"
      | "ResetExecuted"
      | "ResetExecuted()"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToList",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToList(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get(bytes32[])",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governor()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorDeployer()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listContains(bytes32,address[])",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "listContains(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenDeployer()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromList",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromList(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "reset()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addToList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governorDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorDeployer()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listContains(bytes32,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listContains(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenDeployer()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromList(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
}

export namespace AddressAddedToListEvent {
  export type InputTuple = [list: BytesLike, account: AddressLike];
  export type OutputTuple = [list: string, account: string];
  export interface OutputObject {
    list: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressRemovedFromListEvent {
  export type InputTuple = [list: BytesLike, account: AddressLike];
  export type OutputTuple = [list: string, account: string];
  export interface OutputObject {
    list: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigUpdatedEvent {
  export type InputTuple = [key: BytesLike, value: BytesLike];
  export type OutputTuple = [key: string, value: string];
  export interface OutputObject {
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetExecutedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegistrarAbi extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistrarAbi;
  waitForDeployment(): Promise<this>;

  interface: IRegistrarAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToList: TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "addToList(bytes32,address)": TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "get(bytes32)": TypedContractMethod<[key: BytesLike], [string], "view">;

  "get(bytes32[])": TypedContractMethod<
    [keys: BytesLike[]],
    [string[]],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  "governor()": TypedContractMethod<[], [string], "view">;

  governorDeployer: TypedContractMethod<[], [string], "view">;

  "governorDeployer()": TypedContractMethod<[], [string], "view">;

  "listContains(bytes32,address[])": TypedContractMethod<
    [list: BytesLike, accounts: AddressLike[]],
    [boolean],
    "view"
  >;

  "listContains(bytes32,address)": TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  powerTokenDeployer: TypedContractMethod<[], [string], "view">;

  "powerTokenDeployer()": TypedContractMethod<[], [string], "view">;

  removeFromList: TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "removeFromList(bytes32,address)": TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  reset: TypedContractMethod<[], [void], "nonpayable">;

  "reset()": TypedContractMethod<[], [void], "nonpayable">;

  updateConfig: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  "updateConfig(bytes32,bytes32)": TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  zeroToken: TypedContractMethod<[], [string], "view">;

  "zeroToken()": TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToList"
  ): TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToList(bytes32,address)"
  ): TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "get(bytes32[])"
  ): TypedContractMethod<[keys: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governor()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governorDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governorDeployer()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "listContains(bytes32,address[])"
  ): TypedContractMethod<
    [list: BytesLike, accounts: AddressLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listContains(bytes32,address)"
  ): TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "powerTokenDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "powerTokenDeployer()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromList"
  ): TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeFromList(bytes32,address)"
  ): TypedContractMethod<
    [list: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reset()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateConfig(bytes32,bytes32)"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zeroToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroToken()"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddressAddedToList"
  ): TypedContractEvent<
    AddressAddedToListEvent.InputTuple,
    AddressAddedToListEvent.OutputTuple,
    AddressAddedToListEvent.OutputObject
  >;
  getEvent(
    key: "AddressAddedToList(bytes32,address)"
  ): TypedContractEvent<
    AddressAddedToList_bytes32_address_Event.InputTuple,
    AddressAddedToList_bytes32_address_Event.OutputTuple,
    AddressAddedToList_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "AddressRemovedFromList"
  ): TypedContractEvent<
    AddressRemovedFromListEvent.InputTuple,
    AddressRemovedFromListEvent.OutputTuple,
    AddressRemovedFromListEvent.OutputObject
  >;
  getEvent(
    key: "AddressRemovedFromList(bytes32,address)"
  ): TypedContractEvent<
    AddressRemovedFromList_bytes32_address_Event.InputTuple,
    AddressRemovedFromList_bytes32_address_Event.OutputTuple,
    AddressRemovedFromList_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "ConfigUpdated"
  ): TypedContractEvent<
    ConfigUpdatedEvent.InputTuple,
    ConfigUpdatedEvent.OutputTuple,
    ConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigUpdated(bytes32,bytes32)"
  ): TypedContractEvent<
    ConfigUpdated_bytes32_bytes32_Event.InputTuple,
    ConfigUpdated_bytes32_bytes32_Event.OutputTuple,
    ConfigUpdated_bytes32_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "ResetExecuted"
  ): TypedContractEvent<
    ResetExecutedEvent.InputTuple,
    ResetExecutedEvent.OutputTuple,
    ResetExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ResetExecuted()"
  ): TypedContractEvent<
    ResetExecuted__Event.InputTuple,
    ResetExecuted__Event.OutputTuple,
    ResetExecuted__Event.OutputObject
  >;

  filters: {
    "AddressAddedToList(bytes32,address)": TypedContractEvent<
      AddressAddedToListEvent.InputTuple,
      AddressAddedToListEvent.OutputTuple,
      AddressAddedToListEvent.OutputObject
    >;
    AddressAddedToList: TypedContractEvent<
      AddressAddedToListEvent.InputTuple,
      AddressAddedToListEvent.OutputTuple,
      AddressAddedToListEvent.OutputObject
    >;

    "AddressRemovedFromList(bytes32,address)": TypedContractEvent<
      AddressRemovedFromListEvent.InputTuple,
      AddressRemovedFromListEvent.OutputTuple,
      AddressRemovedFromListEvent.OutputObject
    >;
    AddressRemovedFromList: TypedContractEvent<
      AddressRemovedFromListEvent.InputTuple,
      AddressRemovedFromListEvent.OutputTuple,
      AddressRemovedFromListEvent.OutputObject
    >;

    "ConfigUpdated(bytes32,bytes32)": TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;
    ConfigUpdated: TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;

    "ResetExecuted()": TypedContractEvent<
      ResetExecutedEvent.InputTuple,
      ResetExecutedEvent.OutputTuple,
      ResetExecutedEvent.OutputObject
    >;
    ResetExecuted: TypedContractEvent<
      ResetExecutedEvent.InputTuple,
      ResetExecutedEvent.OutputTuple,
      ResetExecutedEvent.OutputObject
    >;
  };
}
