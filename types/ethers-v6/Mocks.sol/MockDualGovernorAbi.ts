/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MockDualGovernorAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cashToken"
      | "cashToken()"
      | "maxProposalFee"
      | "maxProposalFee()"
      | "minProposalFee"
      | "minProposalFee()"
      | "powerTokenQuorumRatio"
      | "powerTokenQuorumRatio()"
      | "proposalFee"
      | "proposalFee()"
      | "reward"
      | "reward()"
      | "setZeroToken"
      | "setZeroToken(address)"
      | "zeroToken"
      | "zeroToken()"
      | "zeroTokenQuorumRatio"
      | "zeroTokenQuorumRatio()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setZeroToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setZeroToken(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setZeroToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZeroToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio()",
    data: BytesLike
  ): Result;
}

export interface MockDualGovernorAbi extends BaseContract {
  connect(runner?: ContractRunner | null): MockDualGovernorAbi;
  waitForDeployment(): Promise<this>;

  interface: MockDualGovernorAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cashToken: TypedContractMethod<[], [string], "view">;

  "cashToken()": TypedContractMethod<[], [string], "view">;

  maxProposalFee: TypedContractMethod<[], [bigint], "view">;

  "maxProposalFee()": TypedContractMethod<[], [bigint], "view">;

  minProposalFee: TypedContractMethod<[], [bigint], "view">;

  "minProposalFee()": TypedContractMethod<[], [bigint], "view">;

  powerTokenQuorumRatio: TypedContractMethod<[], [bigint], "view">;

  "powerTokenQuorumRatio()": TypedContractMethod<[], [bigint], "view">;

  proposalFee: TypedContractMethod<[], [bigint], "view">;

  "proposalFee()": TypedContractMethod<[], [bigint], "view">;

  reward: TypedContractMethod<[], [bigint], "view">;

  "reward()": TypedContractMethod<[], [bigint], "view">;

  setZeroToken: TypedContractMethod<
    [zeroToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  "setZeroToken(address)": TypedContractMethod<
    [zeroToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  zeroToken: TypedContractMethod<[], [string], "view">;

  "zeroToken()": TypedContractMethod<[], [string], "view">;

  zeroTokenQuorumRatio: TypedContractMethod<[], [bigint], "view">;

  "zeroTokenQuorumRatio()": TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cashToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxProposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "powerTokenQuorumRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "powerTokenQuorumRatio()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalFee()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reward()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setZeroToken"
  ): TypedContractMethod<[zeroToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setZeroToken(address)"
  ): TypedContractMethod<[zeroToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zeroToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeroTokenQuorumRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zeroTokenQuorumRatio()"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
