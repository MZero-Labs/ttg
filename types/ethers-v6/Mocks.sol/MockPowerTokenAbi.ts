/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MockPowerTokenAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPastVotes"
      | "getPastVotes(address,uint256)"
      | "markParticipation"
      | "markParticipation(address)"
      | "setTotalSupplyAt"
      | "setTotalSupplyAt(uint256)"
      | "setVotePower"
      | "setVotePower(uint256)"
      | "totalSupplyAt"
      | "totalSupplyAt(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupplyAt(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePower(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt(uint256)",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupplyAt(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePower(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt(uint256)",
    data: BytesLike
  ): Result;
}

export interface MockPowerTokenAbi extends BaseContract {
  connect(runner?: ContractRunner | null): MockPowerTokenAbi;
  waitForDeployment(): Promise<this>;

  interface: MockPowerTokenAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPastVotes: TypedContractMethod<
    [account_: AddressLike, timepoint_: BigNumberish],
    [bigint],
    "view"
  >;

  "getPastVotes(address,uint256)": TypedContractMethod<
    [account_: AddressLike, timepoint_: BigNumberish],
    [bigint],
    "view"
  >;

  markParticipation: TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  "markParticipation(address)": TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  setTotalSupplyAt: TypedContractMethod<
    [totalSupplyAt_: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setTotalSupplyAt(uint256)": TypedContractMethod<
    [totalSupplyAt_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotePower: TypedContractMethod<
    [votePower_: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setVotePower(uint256)": TypedContractMethod<
    [votePower_: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupplyAt: TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;

  "totalSupplyAt(uint256)": TypedContractMethod<
    [epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPastVotes"
  ): TypedContractMethod<
    [account_: AddressLike, timepoint_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastVotes(address,uint256)"
  ): TypedContractMethod<
    [account_: AddressLike, timepoint_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "markParticipation"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markParticipation(address)"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalSupplyAt"
  ): TypedContractMethod<[totalSupplyAt_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalSupplyAt(uint256)"
  ): TypedContractMethod<[totalSupplyAt_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotePower"
  ): TypedContractMethod<[votePower_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotePower(uint256)"
  ): TypedContractMethod<[votePower_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt(uint256)"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;

  filters: {};
}
