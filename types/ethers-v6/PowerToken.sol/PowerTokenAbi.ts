/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PowerTokenAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_MODE"
      | "CLOCK_MODE()"
      | "DELEGATION_TYPEHASH"
      | "DELEGATION_TYPEHASH()"
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "INITIAL_SUPPLY"
      | "INITIAL_SUPPLY()"
      | "ONE"
      | "ONE()"
      | "PERMIT_TYPEHASH"
      | "PERMIT_TYPEHASH()"
      | "activeEpochs"
      | "activeEpochs()"
      | "allowance"
      | "allowance(address,address)"
      | "amountToAuction"
      | "amountToAuction()"
      | "approve"
      | "approve(address,uint256)"
      | "balanceOf"
      | "balanceOf(address)"
      | "balanceOfAt"
      | "balanceOfAt(address,uint256)"
      | "bootstrapEpoch"
      | "bootstrapEpoch()"
      | "bootstrapToken"
      | "bootstrapToken()"
      | "buy"
      | "buy(uint256,address)"
      | "cashToken"
      | "cashToken()"
      | "clock"
      | "clock()"
      | "decimals"
      | "decimals()"
      | "decreaseAllowance"
      | "decreaseAllowance(address,uint256)"
      | "delegate"
      | "delegate(address)"
      | "delegateBySig"
      | "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
      | "delegates"
      | "delegates(address)"
      | "delegatesAt"
      | "delegatesAt(address,uint256)"
      | "getCost"
      | "getCost(uint256)"
      | "getPastVotes"
      | "getPastVotes(address,uint256)"
      | "getVotes"
      | "getVotes(address)"
      | "governor"
      | "governor()"
      | "hasParticipatedAt"
      | "hasParticipatedAt(address,uint256)"
      | "increaseAllowance"
      | "increaseAllowance(address,uint256)"
      | "isActiveEpoch"
      | "isActiveEpoch(uint256)"
      | "markEpochActive"
      | "markEpochActive()"
      | "markParticipation"
      | "markParticipation(address)"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "participationInflation"
      | "participationInflation()"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "symbol"
      | "symbol()"
      | "totalSupply"
      | "totalSupply()"
      | "totalSupplyAt"
      | "totalSupplyAt(uint256)"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "treasury"
      | "treasury()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Approval(address,address,uint256)"
      | "Buy"
      | "Buy(address,uint256,uint256)"
      | "DelegateChanged"
      | "DelegateChanged(address,address,address)"
      | "DelegateVotesChanged"
      | "DelegateVotesChanged(address,uint256,uint256)"
      | "EpochMarkedActive"
      | "EpochMarkedActive(uint256)"
      | "Transfer"
      | "Transfer(address,address,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeEpochs()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountToAuction()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpoch()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "clock()", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesAt(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCost(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governor()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasParticipatedAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasParticipatedAt(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveEpoch(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markEpochActive()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markParticipation(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "participationInflation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participationInflation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasury()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLOCK_MODE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeEpochs()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToAuction()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpoch()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buy(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegate(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegates(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCost(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotes(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasParticipatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasParticipatedAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveEpoch(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markEpochActive()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markParticipation(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationInflation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury()", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    account: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, spender: string, amount: bigint];
  export interface OutputObject {
    account: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    amount: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [buyer: string, amount: bigint, cost: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochMarkedActiveEvent {
  export type InputTuple = [epoch: BigNumberish];
  export type OutputTuple = [epoch: bigint];
  export interface OutputObject {
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    account: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PowerTokenAbi extends BaseContract {
  connect(runner?: ContractRunner | null): PowerTokenAbi;
  waitForDeployment(): Promise<this>;

  interface: PowerTokenAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  "CLOCK_MODE()": TypedContractMethod<[], [string], "view">;

  DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "DELEGATION_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  "DOMAIN_SEPARATOR()": TypedContractMethod<[], [string], "view">;

  INITIAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  "INITIAL_SUPPLY()": TypedContractMethod<[], [bigint], "view">;

  ONE: TypedContractMethod<[], [bigint], "view">;

  "ONE()": TypedContractMethod<[], [bigint], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  "PERMIT_TYPEHASH()": TypedContractMethod<[], [string], "view">;

  activeEpochs: TypedContractMethod<[], [bigint], "view">;

  "activeEpochs()": TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [account_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;

  "allowance(address,address)": TypedContractMethod<
    [account_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;

  amountToAuction: TypedContractMethod<[], [bigint], "view">;

  "amountToAuction()": TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [spender_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "approve(address,uint256)": TypedContractMethod<
    [spender_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account_: AddressLike], [bigint], "view">;

  "balanceOf(address)": TypedContractMethod<
    [account_: AddressLike],
    [bigint],
    "view"
  >;

  balanceOfAt: TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  "balanceOfAt(address,uint256)": TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  bootstrapEpoch: TypedContractMethod<[], [bigint], "view">;

  "bootstrapEpoch()": TypedContractMethod<[], [bigint], "view">;

  bootstrapToken: TypedContractMethod<[], [string], "view">;

  "bootstrapToken()": TypedContractMethod<[], [string], "view">;

  buy: TypedContractMethod<
    [amount_: BigNumberish, destination_: AddressLike],
    [void],
    "nonpayable"
  >;

  "buy(uint256,address)": TypedContractMethod<
    [amount_: BigNumberish, destination_: AddressLike],
    [void],
    "nonpayable"
  >;

  cashToken: TypedContractMethod<[], [string], "view">;

  "cashToken()": TypedContractMethod<[], [string], "view">;

  clock: TypedContractMethod<[], [bigint], "view">;

  "clock()": TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  "decimals()": TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender_: AddressLike, subtractedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "decreaseAllowance(address,uint256)": TypedContractMethod<
    [spender_: AddressLike, subtractedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  delegate: TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  "delegate(address)": TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  delegateBySig: TypedContractMethod<
    [
      delegatee_: AddressLike,
      nonce_: BigNumberish,
      expiry_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": TypedContractMethod<
    [
      delegatee_: AddressLike,
      nonce_: BigNumberish,
      expiry_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[account_: AddressLike], [string], "view">;

  "delegates(address)": TypedContractMethod<
    [account_: AddressLike],
    [string],
    "view"
  >;

  delegatesAt: TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [string],
    "view"
  >;

  "delegatesAt(address,uint256)": TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [string],
    "view"
  >;

  getCost: TypedContractMethod<[amount_: BigNumberish], [bigint], "view">;

  "getCost(uint256)": TypedContractMethod<
    [amount_: BigNumberish],
    [bigint],
    "view"
  >;

  getPastVotes: TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  "getPastVotes(address,uint256)": TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  getVotes: TypedContractMethod<[account_: AddressLike], [bigint], "view">;

  "getVotes(address)": TypedContractMethod<
    [account_: AddressLike],
    [bigint],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  "governor()": TypedContractMethod<[], [string], "view">;

  hasParticipatedAt: TypedContractMethod<
    [delegatee_: AddressLike, epoch_: BigNumberish],
    [boolean],
    "view"
  >;

  "hasParticipatedAt(address,uint256)": TypedContractMethod<
    [delegatee_: AddressLike, epoch_: BigNumberish],
    [boolean],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender_: AddressLike, addedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "increaseAllowance(address,uint256)": TypedContractMethod<
    [spender_: AddressLike, addedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isActiveEpoch: TypedContractMethod<[epoch_: BigNumberish], [boolean], "view">;

  "isActiveEpoch(uint256)": TypedContractMethod<
    [epoch_: BigNumberish],
    [boolean],
    "view"
  >;

  markEpochActive: TypedContractMethod<[], [void], "nonpayable">;

  "markEpochActive()": TypedContractMethod<[], [void], "nonpayable">;

  markParticipation: TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  "markParticipation(address)": TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  "name()": TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[account_: AddressLike], [bigint], "view">;

  "nonces(address)": TypedContractMethod<
    [account_: AddressLike],
    [bigint],
    "view"
  >;

  participationInflation: TypedContractMethod<[], [bigint], "view">;

  "participationInflation()": TypedContractMethod<[], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  "symbol()": TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;

  "totalSupplyAt(uint256)": TypedContractMethod<
    [epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  transfer: TypedContractMethod<
    [recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "transfer(address,uint256)": TypedContractMethod<
    [recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "transferFrom(address,address,uint256)": TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  "treasury()": TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLOCK_MODE()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DELEGATION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DELEGATION_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INITIAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_SUPPLY()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeEpochs()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [account_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [account_: AddressLike, spender_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "amountToAuction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountToAuction()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfAt(address,uint256)"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bootstrapEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bootstrapEpoch()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bootstrapToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bootstrapToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [amount_: BigNumberish, destination_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buy(uint256,address)"
  ): TypedContractMethod<
    [amount_: BigNumberish, destination_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cashToken()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "clock()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, subtractedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender_: AddressLike, subtractedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegate(address)"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegatee_: AddressLike,
      nonce_: BigNumberish,
      expiry_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
  ): TypedContractMethod<
    [
      delegatee_: AddressLike,
      nonce_: BigNumberish,
      expiry_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[account_: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "delegates(address)"
  ): TypedContractMethod<[account_: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "delegatesAt"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegatesAt(address,uint256)"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCost"
  ): TypedContractMethod<[amount_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCost(uint256)"
  ): TypedContractMethod<[amount_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastVotes"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastVotes(address,uint256)"
  ): TypedContractMethod<
    [account_: AddressLike, epoch_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotes(address)"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governor()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasParticipatedAt"
  ): TypedContractMethod<
    [delegatee_: AddressLike, epoch_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasParticipatedAt(address,uint256)"
  ): TypedContractMethod<
    [delegatee_: AddressLike, epoch_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, addedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender_: AddressLike, addedAmount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isActiveEpoch"
  ): TypedContractMethod<[epoch_: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActiveEpoch(uint256)"
  ): TypedContractMethod<[epoch_: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "markEpochActive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markEpochActive()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markParticipation"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markParticipation(address)"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces(address)"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "participationInflation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participationInflation()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      spender_: AddressLike,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt(uint256)"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, amount_: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury()"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "Buy(address,uint256,uint256)"
  ): TypedContractEvent<
    Buy_address_uint256_uint256_Event.InputTuple,
    Buy_address_uint256_uint256_Event.OutputTuple,
    Buy_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateChanged(address,address,address)"
  ): TypedContractEvent<
    DelegateChanged_address_address_address_Event.InputTuple,
    DelegateChanged_address_address_address_Event.OutputTuple,
    DelegateChanged_address_address_address_Event.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged(address,uint256,uint256)"
  ): TypedContractEvent<
    DelegateVotesChanged_address_uint256_uint256_Event.InputTuple,
    DelegateVotesChanged_address_uint256_uint256_Event.OutputTuple,
    DelegateVotesChanged_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "EpochMarkedActive"
  ): TypedContractEvent<
    EpochMarkedActiveEvent.InputTuple,
    EpochMarkedActiveEvent.OutputTuple,
    EpochMarkedActiveEvent.OutputObject
  >;
  getEvent(
    key: "EpochMarkedActive(uint256)"
  ): TypedContractEvent<
    EpochMarkedActive_uint256_Event.InputTuple,
    EpochMarkedActive_uint256_Event.OutputTuple,
    EpochMarkedActive_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Buy(address,uint256,uint256)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "EpochMarkedActive(uint256)": TypedContractEvent<
      EpochMarkedActiveEvent.InputTuple,
      EpochMarkedActiveEvent.OutputTuple,
      EpochMarkedActiveEvent.OutputObject
    >;
    EpochMarkedActive: TypedContractEvent<
      EpochMarkedActiveEvent.InputTuple,
      EpochMarkedActiveEvent.OutputTuple,
      EpochMarkedActiveEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
