/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockDualGovernorDeployer,
  MockDualGovernorDeployerInterface,
} from "../../Mocks.sol/MockDualGovernorDeployer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "cashToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "powerToken_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "proposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minProposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxProposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "zeroTokenQuorumRatio_",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "powerTokenQuorumRatio_",
        type: "uint16",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "deployed_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nextDeploy_",
        type: "address",
      },
    ],
    name: "setNextDeploy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506101ee8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80635da592f514610038578063b650230d14610093575b5f80fd5b61006a610046366004610122565b50505f5473ffffffffffffffffffffffffffffffffffffffff169695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100e76100a1366004610198565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b803573ffffffffffffffffffffffffffffffffffffffff8116811461010c575f80fd5b919050565b803561ffff8116811461010c575f80fd5b5f805f805f805f80610100898b03121561013a575f80fd5b610143896100e9565b975061015160208a016100e9565b965060408901359550606089013594506080890135935060a0890135925061017b60c08a01610111565b915061018960e08a01610111565b90509295985092959890939650565b5f602082840312156101a8575f80fd5b6101b1826100e9565b939250505056fea2646970667358221220dd724a15853dd3e26dc6c7a6c32777cfbc8e9e7a4f610b5f56554d291599fc2564736f6c63430008140033";

type MockDualGovernorDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDualGovernorDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDualGovernorDeployer__factory extends ContractFactory {
  constructor(...args: MockDualGovernorDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDualGovernorDeployer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockDualGovernorDeployer__factory {
    return super.connect(runner) as MockDualGovernorDeployer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDualGovernorDeployerInterface {
    return new Interface(_abi) as MockDualGovernorDeployerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockDualGovernorDeployer {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockDualGovernorDeployer;
  }
}
