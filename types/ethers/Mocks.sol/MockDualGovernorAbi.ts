/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MockDualGovernorAbiInterface extends utils.Interface {
  functions: {
    "cashToken()": FunctionFragment;
    "maxProposalFee()": FunctionFragment;
    "minProposalFee()": FunctionFragment;
    "powerTokenQuorumRatio()": FunctionFragment;
    "proposalFee()": FunctionFragment;
    "reward()": FunctionFragment;
    "zeroToken()": FunctionFragment;
    "zeroTokenQuorumRatio()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cashToken"
      | "cashToken()"
      | "maxProposalFee"
      | "maxProposalFee()"
      | "minProposalFee"
      | "minProposalFee()"
      | "powerTokenQuorumRatio"
      | "powerTokenQuorumRatio()"
      | "proposalFee"
      | "proposalFee()"
      | "reward"
      | "reward()"
      | "zeroToken"
      | "zeroToken()"
      | "zeroTokenQuorumRatio"
      | "zeroTokenQuorumRatio()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cashToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTokenQuorumRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalFee()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward()", values?: undefined): string;
  encodeFunctionData(functionFragment: "zeroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTokenQuorumRatio()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenQuorumRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroTokenQuorumRatio()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockDualGovernorAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockDualGovernorAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cashToken(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken_: string }>;

    "cashToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { cashToken_: string }>;

    maxProposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxProposalFee_: BigNumber }>;

    "maxProposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxProposalFee_: BigNumber }>;

    minProposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minProposalFee_: BigNumber }>;

    "minProposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minProposalFee_: BigNumber }>;

    powerTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { powerTokenQuorumRatio_: BigNumber }>;

    "powerTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { powerTokenQuorumRatio_: BigNumber }>;

    proposalFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalFee_: BigNumber }>;

    "proposalFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proposalFee_: BigNumber }>;

    reward(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    "reward()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    zeroToken(
      overrides?: CallOverrides
    ): Promise<[string] & { zeroToken_: string }>;

    "zeroToken()"(
      overrides?: CallOverrides
    ): Promise<[string] & { zeroToken_: string }>;

    zeroTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { zeroTokenQuorumRatio_: BigNumber }>;

    "zeroTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { zeroTokenQuorumRatio_: BigNumber }>;
  };

  cashToken(overrides?: CallOverrides): Promise<string>;

  "cashToken()"(overrides?: CallOverrides): Promise<string>;

  maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward(overrides?: CallOverrides): Promise<BigNumber>;

  "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

  zeroToken(overrides?: CallOverrides): Promise<string>;

  "zeroToken()"(overrides?: CallOverrides): Promise<string>;

  zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cashToken(overrides?: CallOverrides): Promise<string>;

    "cashToken()"(overrides?: CallOverrides): Promise<string>;

    maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroToken(overrides?: CallOverrides): Promise<string>;

    "zeroToken()"(overrides?: CallOverrides): Promise<string>;

    zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cashToken(overrides?: CallOverrides): Promise<BigNumber>;

    "cashToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minProposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minProposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "powerTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    "reward()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroToken(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroTokenQuorumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroTokenQuorumRatio()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cashToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cashToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxProposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxProposalFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minProposalFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    powerTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "powerTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroTokenQuorumRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "zeroTokenQuorumRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
