/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MockDualGovernorDeployerInterface extends utils.Interface {
  functions: {
    "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)": FunctionFragment;
    "setNextDeploy(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"
      | "setNextDeploy"
      | "setNextDeploy(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextDeploy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextDeploy(address)",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextDeploy(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockDualGovernorDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockDualGovernorDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { deployed_: string }>;

    "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { deployed_: string }>;

    setNextDeploy(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setNextDeploy(address)"(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deploy(
    cashToken_: string,
    powerToken_: string,
    proposalFee_: BigNumberish,
    minProposalFee_: BigNumberish,
    maxProposalFee_: BigNumberish,
    reward_: BigNumberish,
    zeroTokenQuorumRatio_: BigNumberish,
    powerTokenQuorumRatio_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"(
    cashToken_: string,
    powerToken_: string,
    proposalFee_: BigNumberish,
    minProposalFee_: BigNumberish,
    maxProposalFee_: BigNumberish,
    reward_: BigNumberish,
    zeroTokenQuorumRatio_: BigNumberish,
    powerTokenQuorumRatio_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setNextDeploy(
    nextDeploy_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setNextDeploy(address)"(
    nextDeploy_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deploy(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setNextDeploy(
      nextDeploy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNextDeploy(address)"(
      nextDeploy_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deploy(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNextDeploy(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setNextDeploy(address)"(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deploy(address,address,uint256,uint256,uint256,uint256,uint16,uint16)"(
      cashToken_: string,
      powerToken_: string,
      proposalFee_: BigNumberish,
      minProposalFee_: BigNumberish,
      maxProposalFee_: BigNumberish,
      reward_: BigNumberish,
      zeroTokenQuorumRatio_: BigNumberish,
      powerTokenQuorumRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNextDeploy(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setNextDeploy(address)"(
      nextDeploy_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
