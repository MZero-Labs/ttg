/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PowerTokenDeployerInterface extends utils.Interface {
  functions: {
    "deploy(address,address,address)": FunctionFragment;
    "getNextDeploy()": FunctionFragment;
    "nonce()": FunctionFragment;
    "registrar()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "deploy(address,address,address)"
      | "getNextDeploy"
      | "getNextDeploy()"
      | "nonce"
      | "nonce()"
      | "registrar"
      | "registrar()"
      | "treasury"
      | "treasury()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(address,address,address)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeploy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeploy()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce()", values?: undefined): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrar()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasury()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeploy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrar()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury()", data: BytesLike): Result;

  events: {};
}

export interface PowerTokenDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PowerTokenDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deploy(address,address,address)"(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getNextDeploy(
      overrides?: CallOverrides
    ): Promise<[string] & { nextDeploy_: string }>;

    "getNextDeploy()"(
      overrides?: CallOverrides
    ): Promise<[string] & { nextDeploy_: string }>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    "registrar()"(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;
  };

  deploy(
    governor_: string,
    cashToken_: string,
    bootstrapToken_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deploy(address,address,address)"(
    governor_: string,
    cashToken_: string,
    bootstrapToken_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getNextDeploy(overrides?: CallOverrides): Promise<string>;

  "getNextDeploy()"(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  registrar(overrides?: CallOverrides): Promise<string>;

  "registrar()"(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,address,address)"(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNextDeploy(overrides?: CallOverrides): Promise<string>;

    "getNextDeploy()"(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<string>;

    "registrar()"(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    deploy(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deploy(address,address,address)"(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getNextDeploy(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextDeploy()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    "registrar()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deploy(address,address,address)"(
      governor_: string,
      cashToken_: string,
      bootstrapToken_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getNextDeploy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextDeploy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registrar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
