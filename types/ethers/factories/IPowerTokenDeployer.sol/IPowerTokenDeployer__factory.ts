/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPowerTokenDeployer,
  IPowerTokenDeployerInterface,
} from "../../IPowerTokenDeployer.sol/IPowerTokenDeployer";

const _abi = [
  {
    inputs: [],
    name: "CallerIsNotRegistrar",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "cashToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "bootstrapToken",
        type: "address",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "deployed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNextDeploy",
    outputs: [
      {
        internalType: "address",
        name: "nextDeploy",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrar",
    outputs: [
      {
        internalType: "address",
        name: "registrar",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "treasury",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPowerTokenDeployer__factory {
  static readonly abi = _abi;
  static createInterface(): IPowerTokenDeployerInterface {
    return new utils.Interface(_abi) as IPowerTokenDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPowerTokenDeployer {
    return new Contract(address, _abi, signerOrProvider) as IPowerTokenDeployer;
  }
}
