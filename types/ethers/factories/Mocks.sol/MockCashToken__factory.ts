/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockCashToken,
  MockCashTokenInterface,
} from "../../Mocks.sol/MockCashToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "transferFromSuccess_",
        type: "bool",
      },
    ],
    name: "setTransferFromSuccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender_",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506101638061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806323b872dd14610038578063da5c690014610066575b5f80fd5b6100526100463660046100ce565b50505f5460ff16919050565b604051901515815260200160405180910390f35b6100a4610074366004610107565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b803573ffffffffffffffffffffffffffffffffffffffff811681146100c9575f80fd5b919050565b5f805f606084860312156100e0575f80fd5b6100e9846100a6565b92506100f7602085016100a6565b9150604084013590509250925092565b5f60208284031215610117575f80fd5b81358015158114610126575f80fd5b939250505056fea26469706673582212208294f23b7a7ccefaf5d534dff8ad0a407f6e0e6607bc9ecfcea67e6436f89dbb64736f6c63430008140033";

type MockCashTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCashTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCashToken__factory extends ContractFactory {
  constructor(...args: MockCashTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockCashToken> {
    return super.deploy(overrides || {}) as Promise<MockCashToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockCashToken {
    return super.attach(address) as MockCashToken;
  }
  override connect(signer: Signer): MockCashToken__factory {
    return super.connect(signer) as MockCashToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCashTokenInterface {
    return new utils.Interface(_abi) as MockCashTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCashToken {
    return new Contract(address, _abi, signerOrProvider) as MockCashToken;
  }
}
