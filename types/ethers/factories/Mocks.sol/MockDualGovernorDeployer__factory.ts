/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockDualGovernorDeployer,
  MockDualGovernorDeployerInterface,
} from "../../Mocks.sol/MockDualGovernorDeployer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "cashToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "powerToken_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "proposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minProposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxProposalFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "zeroTokenQuorumRatio_",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "powerTokenQuorumRatio_",
        type: "uint16",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "deployed_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nextDeploy_",
        type: "address",
      },
    ],
    name: "setNextDeploy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635da592f51461003b578063b650230d14610097575b600080fd5b61006e610049366004610129565b505060005473ffffffffffffffffffffffffffffffffffffffff169695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100ec6100a53660046101a4565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b803573ffffffffffffffffffffffffffffffffffffffff8116811461011257600080fd5b919050565b803561ffff8116811461011257600080fd5b600080600080600080600080610100898b03121561014657600080fd5b61014f896100ee565b975061015d60208a016100ee565b965060408901359550606089013594506080890135935060a0890135925061018760c08a01610117565b915061019560e08a01610117565b90509295985092959890939650565b6000602082840312156101b657600080fd5b6101bf826100ee565b939250505056fea2646970667358221220ea220d90ac2256486c6a13e99bb23497ccad90c3e384a6f05357849383e231db64736f6c63430008130033";

type MockDualGovernorDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDualGovernorDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDualGovernorDeployer__factory extends ContractFactory {
  constructor(...args: MockDualGovernorDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockDualGovernorDeployer> {
    return super.deploy(overrides || {}) as Promise<MockDualGovernorDeployer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDualGovernorDeployer {
    return super.attach(address) as MockDualGovernorDeployer;
  }
  override connect(signer: Signer): MockDualGovernorDeployer__factory {
    return super.connect(signer) as MockDualGovernorDeployer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDualGovernorDeployerInterface {
    return new utils.Interface(_abi) as MockDualGovernorDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDualGovernorDeployer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockDualGovernorDeployer;
  }
}
