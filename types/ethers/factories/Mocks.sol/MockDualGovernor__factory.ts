/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockDualGovernor,
  MockDualGovernorInterface,
} from "../../Mocks.sol/MockDualGovernor";

const _abi = [
  {
    inputs: [],
    name: "cashToken",
    outputs: [
      {
        internalType: "address",
        name: "cashToken_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxProposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "maxProposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minProposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "minProposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "powerTokenQuorumRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "powerTokenQuorumRatio_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward",
    outputs: [
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zeroToken_",
        type: "address",
      },
    ],
    name: "setZeroToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroTokenQuorumRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "zeroTokenQuorumRatio_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635e91b75f11610076578063a72246871161005b578063a722468714610113578063c27cabb5146100a8578063f294bd921461013b57600080fd5b80635e91b75f146100a8578063861c2b06146100bc57600080fd5b80631f4a0180146100a8578063228cb733146100a85780633a5dedf8146100a85780635d53f59f146100a8575b600080fd5b604051600081526020015b60405180910390f35b6101116100ca36600461015b565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b60005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b3565b6000546101169073ffffffffffffffffffffffffffffffffffffffff1681565b60006020828403121561016d57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461019157600080fd5b939250505056fea2646970667358221220bb6cb0b19b29a1a2ff700795a368afd7be2ccbe378a84b1185f187339cb7a19764736f6c63430008130033";

type MockDualGovernorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDualGovernorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDualGovernor__factory extends ContractFactory {
  constructor(...args: MockDualGovernorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockDualGovernor> {
    return super.deploy(overrides || {}) as Promise<MockDualGovernor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDualGovernor {
    return super.attach(address) as MockDualGovernor;
  }
  override connect(signer: Signer): MockDualGovernor__factory {
    return super.connect(signer) as MockDualGovernor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDualGovernorInterface {
    return new utils.Interface(_abi) as MockDualGovernorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDualGovernor {
    return new Contract(address, _abi, signerOrProvider) as MockDualGovernor;
  }
}
