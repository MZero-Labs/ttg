/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockDualGovernor,
  MockDualGovernorInterface,
} from "../../Mocks.sol/MockDualGovernor";

const _abi = [
  {
    inputs: [],
    name: "cashToken",
    outputs: [
      {
        internalType: "address",
        name: "cashToken_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxProposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "maxProposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minProposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "minProposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "powerTokenQuorumRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "powerTokenQuorumRatio_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalFee",
    outputs: [
      {
        internalType: "uint256",
        name: "proposalFee_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward",
    outputs: [
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zeroToken_",
        type: "address",
      },
    ],
    name: "setZeroToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroTokenQuorumRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "zeroTokenQuorumRatio_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506101c28061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c80635e91b75f11610072578063a722468711610058578063a72246871461010c578063c27cabb5146100a3578063f294bd9214610133575f80fd5b80635e91b75f146100a3578063861c2b06146100b6575f80fd5b80631f4a0180146100a3578063228cb733146100a35780633a5dedf8146100a35780635d53f59f146100a3575b5f80fd5b6040515f81526020015b60405180910390f35b61010a6100c4366004610152565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b5f5b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ad565b5f5461010e9073ffffffffffffffffffffffffffffffffffffffff1681565b5f60208284031215610162575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610185575f80fd5b939250505056fea26469706673582212202b22fd29a405918f0d955f6c19974dc74f5d81b8465638ed5902592f31504da864736f6c63430008140033";

type MockDualGovernorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDualGovernorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDualGovernor__factory extends ContractFactory {
  constructor(...args: MockDualGovernorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockDualGovernor> {
    return super.deploy(overrides || {}) as Promise<MockDualGovernor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDualGovernor {
    return super.attach(address) as MockDualGovernor;
  }
  override connect(signer: Signer): MockDualGovernor__factory {
    return super.connect(signer) as MockDualGovernor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDualGovernorInterface {
    return new utils.Interface(_abi) as MockDualGovernorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDualGovernor {
    return new Contract(address, _abi, signerOrProvider) as MockDualGovernor;
  }
}
