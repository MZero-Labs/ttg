/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockEpochBasedVoteToken,
  MockEpochBasedVoteTokenInterface,
} from "../../Mocks.sol/MockEpochBasedVoteToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epoch_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupplyAt_",
        type: "uint256",
      },
    ],
    name: "setTotalSupplyAt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epoch_",
        type: "uint256",
      },
    ],
    name: "totalSupplyAt",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638f3f63cf146037578063981b24d0146056575b600080fd5b605460423660046085565b60009182526020829052604090912055565b005b6073606136600460a6565b60009081526020819052604090205490565b60405190815260200160405180910390f35b60008060408385031215609757600080fd5b50508035926020909101359150565b60006020828403121560b757600080fd5b503591905056fea2646970667358221220372830ce03567c8d4163de66d1fd90cb3dcbc40f696f011239628950f3a2524d64736f6c63430008130033";

type MockEpochBasedVoteTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockEpochBasedVoteTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockEpochBasedVoteToken__factory extends ContractFactory {
  constructor(...args: MockEpochBasedVoteTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockEpochBasedVoteToken> {
    return super.deploy(overrides || {}) as Promise<MockEpochBasedVoteToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockEpochBasedVoteToken {
    return super.attach(address) as MockEpochBasedVoteToken;
  }
  override connect(signer: Signer): MockEpochBasedVoteToken__factory {
    return super.connect(signer) as MockEpochBasedVoteToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockEpochBasedVoteTokenInterface {
    return new utils.Interface(_abi) as MockEpochBasedVoteTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockEpochBasedVoteToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockEpochBasedVoteToken;
  }
}
